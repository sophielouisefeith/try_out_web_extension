/**
@example
{
    // Recommended
    defaults: {
        color: 'blue'
    },
    // Optional
    migrations: [
        savedOptions => {
            if (savedOptions.oldStuff) {
                delete savedOptions.oldStuff;
            }
        }
    ],
}
*/
export interface Setup<TOptions extends Options> {
    storageName?: string;
    logging?: boolean;
    defaults?: TOptions;
    /**
     * A list of functions to call when the extension is updated.
     */
    migrations?: Array<Migration<TOptions>>;
}
/**
A map of options as strings or booleans. The keys will have to match the form fields' `name` attributes.
*/
export interface Options {
    [key: string]: string | number | boolean;
}
export declare type Migration<TOptions extends Options> = (savedOptions: TOptions, defaults: TOptions) => void;
declare class OptionsSync<TOptions extends Options> {
    static migrations: {
        /**
        Helper method that removes any option that isn't defined in the defaults. It's useful to avoid leaving old options taking up space.
        */
        removeUnused(options: Options, defaults: Options): void;
    };
    storageName: string;
    defaults: TOptions;
    _form: HTMLFormElement | undefined;
    private readonly _migrations;
    /**
    @constructor Returns an instance linked to the chosen storage.
    @param setup - Configuration for `webext-options-sync`
    */
    constructor({ defaults, storageName, migrations, logging, }?: Setup<TOptions>);
    /**
    Retrieves all the options stored.

    @returns Promise that will resolve with **all** the options stored, as an object.

    @example
    const optionsStorage = new OptionsSync();
    const options = await optionsStorage.getAll();
    console.log('The userâ€™s options are', options);
    if (options.color) {
        document.body.style.color = color;
    }
    */
    getAll(): Promise<TOptions>;
    /**
    Overrides **all** the options stored with your `options`.

    @param newOptions - A map of default options as strings or booleans. The keys will have to match the form fields' `name` attributes.
    */
    setAll(newOptions: TOptions): Promise<void>;
    /**
    Merges new options with the existing stored options.

    @param newOptions - A map of default options as strings or booleans. The keys will have to match the form fields' `name` attributes.
    */
    set(newOptions: Partial<TOptions>): Promise<void>;
    /**
    Any defaults or saved options will be loaded into the `<form>` and any change will automatically be saved via `chrome.storage.sync`.

    @param selector - The `<form>` that needs to be synchronized or a CSS selector (one element).
    The form fields' `name` attributes will have to match the option names.
    */
    syncForm(form: string | HTMLFormElement): Promise<void>;
    /**
    Removes any listeners added by `syncForm`
    */
    stopSyncForm(): Promise<void>;
    private _log;
    private _getAll;
    private _setAll;
    private _encode;
    private _decode;
    private _runMigrations;
    private _handleFormInput;
    private _handleFormSubmit;
    private _updateForm;
    private _parseForm;
    private _handleStorageChangeOnForm;
}
export default OptionsSync;
